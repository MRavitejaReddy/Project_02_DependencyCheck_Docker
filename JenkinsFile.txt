pipeline {
    agent any
    tools {
        maven 'Maven'  // Configure Maven tool in Manage Jenkins > Tools if needed
    }
    stages {
        stage('Compile and Test') {
            steps {
                echo 'Compiling and testing the code'
                sh 'ls -ltr'
                sh 'cd java-cicd-project/spring-boot-app && mvn compile && mvn test'
            }
        }
        stage('SonarQube Analysis') {
            steps {
                echo 'Scanning project with SonarQube'
                sh 'ls -ltr'
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''cd java-cicd-project/spring-boot-app && mvn sonar:sonar \\
                          -Dsonar.host.url=http://localhost:9000 \\
                          -Dsonar.login=$SONAR_TOKEN'''
                }
            }
        }
        stage('Dependency Check') {
            steps {
                sh '''
                /opt/dependency-check/bin/dependency-check.sh \
                --project "SpringBootApp" \
                --scan java-cicd-project/spring-boot-app \
                --format HTML \
                --data /var/lib/jenkins/odc-data \
                --out dependency-check-report
                '''
                // Archive the report
                archiveArtifacts 'dependency-check-report/**'
            }
        }
        stage('Building the code') {
            steps {
                sh 'ls -ltr'
                // build the project and create a JAR file
                sh 'cd java-cicd-project/spring-boot-app && mvn clean package'
            }
        }
        stage('Build docker image') {
            steps {
                script {
                    echo 'docker image build'
                    sh 'cd java-cicd-project/spring-boot-app && docker build -t mravitejareddy/java:${BUILD_NUMBER} .'
                }
            }
        }
        stage('docker image scan') {
            steps {
                sh "trivy image mravitejareddy/java:${BUILD_NUMBER}"
            }
        }
        stage('Push image to Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'dockerhub')]) {
                        sh 'docker login -u mravitejareddy -p ${dockerhub}'
                    }
                    sh 'docker push mravitejareddy/java:${BUILD_NUMBER}'
                }
            }
        }
        stage('Deploying image to docker container') {
            steps {
                script {
                    sh 'docker run -itd --name java-app -p 8000:8080 mravitejareddy/java:${BUILD_NUMBER}'
                }
            }
        }
    }
    post {
        always {
            // Clean up if needed
            sh 'docker stop java-app || true'
            sh 'docker rm java-app || true'
        }
    }
}
