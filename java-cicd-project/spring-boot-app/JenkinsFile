pipeline {
    agent any

    tools {
        maven 'Maven'
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo 'Cloning repository...'
                git branch: 'main', url: 'https://github.com/MRavitejaReddy/Project_02_DependencyCheck_Docker.git'
            }
        }

        stage('Compile and Test') {
            steps {
                echo 'Compiling and testing the code'
                sh 'ls -ltr'
                sh 'cd java-cicd-project/spring-boot-app && mvn clean compile test'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Scanning project with SonarQube'
                withCredentials([string(credentialsId: 'sonar-token', variable: 'SONAR_TOKEN')]) {
                    sh '''
                    cd java-cicd-project/spring-boot-app && mvn sonar:sonar \
                        -Dsonar.host.url=http://localhost:9000 \
                        -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Dependency Check') {
            steps {
                script {
                    echo 'Running OWASP Dependency-Check (safe mode without NVD updates)'
                    try {
                        sh '''
                        /opt/dependency-check/bin/dependency-check.sh \
                            --project SpringBootApp \
                            --scan java-cicd-project/spring-boot-app \
                            --format HTML \
                            --data /var/lib/jenkins/odc-data \
                            --out dependency-check-report \
                            --noupdate
                        '''
                    } catch (err) {
                        echo "⚠️ Dependency-Check failed but continuing pipeline: ${err}"
                    }
                }
                archiveArtifacts artifacts: 'dependency-check-report/**', allowEmptyArchive: true
            }
        }

        stage('Build the code') {
            steps {
                echo 'Building JAR'
                sh 'cd java-cicd-project/spring-boot-app && mvn clean package -DskipTests'
            }
        }

        stage('Build docker image') {
            steps {
                script {
                    echo 'Building Docker image'
                    sh '''
                    cd java-cicd-project/spring-boot-app
                    # Find the JAR file dynamically
                    JAR_FILE=$(ls target/*.jar | head -n 1)
                    echo "Using JAR file: $JAR_FILE"
                    docker build --build-arg JAR_FILE=$JAR_FILE -t mravitejareddy/java:${BUILD_NUMBER} .
                    '''
                }
            }
        }

        stage('Docker image scan') {
            steps {
                sh "trivy image mravitejareddy/java:${BUILD_NUMBER}"
            }
        }

        stage('Push image to Hub') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'dockerhub', variable: 'DOCKER_PASS')]) {
                        sh 'docker login -u mravitejareddy -p ${DOCKER_PASS}'
                    }
                    sh 'docker push mravitejareddy/java:${BUILD_NUMBER}'
                }
            }
        }

        stage('Deploying image to docker container') {
            steps {
                script {
                    sh '''
                    docker stop java-app || true
                    docker rm java-app || true
                    docker run -d --name java-app -p 8000:8080 mravitejareddy/java:${BUILD_NUMBER}
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'Cleaning up...'
            sh 'docker ps -a'
        }
    }
}
